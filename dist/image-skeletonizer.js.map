{"version":3,"file":"image-skeletonizer.js","sources":["../src/Image/BinaryImage.js","../src/Image/IntDistanceImage.js","../src/Skeletonizer/Point2D.js","../src/Skeletonizer/SkeletonImage.js","../src/Skeletonizer/SkeletonNode.js","../src/Skeletonizer/Vector2D.js","../src/Skeletonizer/Skeletonizer.js","../src/Skeletonizer/CapsuleDistance.js","../src/Skeletonizer/QuiblierSkeletonizer.js","../src/exports.js"],"sourcesContent":["\"use strict\";\n\n/**\n *  Class to manipulate a \"binary\" image, ie the RGBA pixel data is replaced with 0 or 1 (1 for near black pixels).\n *\n *  @param {ImageData} source The orginal image to be binarized\n *  @param {number}    tolerance The difference to white above which the pixel is considered black. Default to 12.\n *                               Difference is computed by cumulating difference for each channel.\n */\nvar BinaryImage = function(source, tolerance){\n  this.tolerance = tolerance !== undefined ? tolerance : 12;\n  this.width = source.width;\n  this.height = source.height;\n  this.data = new Uint8Array(source.width*source.height);\n  this._buildBinaryImage(source, this.tolerance);\n};\n\nBinaryImage.prototype.constructor = BinaryImage;\n\nBinaryImage.prototype.getIndex = function(x,y){\n  return y*this.width+x;\n};\n/**\n *  @return {number} 0 or 1\n */\nBinaryImage.prototype.getValue = function(x,y){\n  return this.data[this.getIndex(x,y)];\n};\n\n/**\n *  @private\n */\nBinaryImage.prototype._buildBinaryImage = function(source, tolerance){\n    var l = this.width*this.height;\n    for(var i=0; i<l; i++){\n        var idx = 4*i;\n        // this.data[i] = 3*255 - (source.data[idx] + source.data[idx+1] + source.data[idx+2])  < tolerance ? 0 : 1;\n        if(source.data[idx] < 125 && source.data[idx+1] < 125 && source.data[idx+2] < 125){\n            this.data[i] = 1;\n        }else{\n            this.data[i] = 0;\n        }\n\n    }\n};\n\nmodule.exports = BinaryImage;\n","\"use strict\";\n\nvar BinaryImage = require(\"./BinaryImage.js\");\n\n/**\n *  Class keeping distance as an Integer array. This computes the distance to the closest border\n *  of a given shape.\n *  Actual distance approximation can be computed using this.getValue(x,y)/this.getCoeff()\n *\n *  @param {number} c1 Main distance coefficient for a pixel\n *  @param {number} c2 Diagonal distance coefficient for a pixel.\n *  @param {}\n */\nvar IntDistanceImage = function(c1, c2, source, uncolored){\n    if(!(source instanceof BinaryImage)){\n        throw \"IntDistanceImage Error : source must be an instance of BinaryImage\";\n    }\n    this.coeff = c1;\n    this.width = source.width;\n    this.height = source.height;\n    this.data = new Array(source.width*source.height);\n    this._buildDistanceImage(c1, c2, source, uncolored);\n};\n\nIntDistanceImage.prototype.constructor = IntDistanceImage;\n\nIntDistanceImage.prototype.rebuild = function(c1, c2, source, uncolored){\n  this.coeff = c1;\n  this._buildDistanceImage(c1, c2, source, uncolored, this.data);\n};\n\nIntDistanceImage.prototype.getCoeff = function(){\n  return this.coeff;\n};\n\nIntDistanceImage.prototype.getIndex = function(x,y){\n  return y*this.width+x;\n};\nIntDistanceImage.prototype.getValue = function(x,y){\n  return this.data[this.getIndex(x,y)];\n};\nIntDistanceImage.prototype.getIndexValue = function(idx){\n  return this.data[idx];\n};\nIntDistanceImage.prototype.getXFromIndex = function(idx){\n    return idx % this.width;\n};\nIntDistanceImage.prototype.getYFromIndex = function(idx){\n  return Math.floor(idx / this.width);\n};\n\n\nIntDistanceImage.prototype._buildDistanceImage = function(c1, c2, source, uncolored){\n\n    const width = source.width;\n    const height = source.height;\n\n    for (let i = 0; i<width; ++i) {\n        this.data[i] = 0;\n    }\n    for (let j = 1; j<height-1; ++j) {\n        this.data[j*width] = 0;\n        for (let i = 1; i<width-1; ++i) {\n            let index = this.getIndex(i,j);\n            this.data[index] = 0;\n            let dist = 0;\n            if (source.data[index] != uncolored) {\n                let index_1_1 = this.getIndex(i-1, j-1);\n                let index0_1 = this.getIndex(i, j-1);\n                let index_11 = this.getIndex(i-1, j);\n                let index1_1 = this.getIndex(i+1, j-1);\n\n                dist = Math.min(this.data[index_1_1] + c2, this.data[index0_1] + c1);\n                dist = Math.min(dist, this.data[index_11] + c1);\n                dist = Math.min(dist, this.data[index1_1] + c2);\n                this.data[index] = dist;\n            }\n        }\n        this.data[this.getIndex(width-1, j)] = 0;\n    }\n    for (let i = 0; i<width; ++i){\n        this.data[this.getIndex(i, height-1)] = 0;\n    }\n\n    for (let j = height-2; j>0; --j) {\n        for (let i = width-2; i>0; --i) {\n            let index = this.getIndex(i,j);\n            let dist = this.data[index];\n            if (source.data[index] != uncolored)\n            {\n                let index11 = this.getIndex(i+1, j+1);\n                let index0_1 = this.getIndex(i, j+1);\n                let index_11 = this.getIndex(i-1, j+1);\n                let index10 = this.getIndex(i+1, j);\n                dist = Math.min(dist, this.data[index11] + c2);\n                dist = Math.min(dist, this.data[index0_1] + c1);\n                dist = Math.min(dist, this.data[index_11] + c2);\n                this.data[index] = Math.min(dist, this.data[index10] + c1);\n            }\n        }\n    }\n};\n\n/**\n *  @return {ImageData} A grey scale ImageData to visualize the distances.\n */\nIntDistanceImage.prototype.getImageData = function (skeleton) {\n\n    var res = new ImageData(this.width,this.height)\n\n    let maxDist = 0;\n    for (let x = 0; x < this.width*this.height; x++) {\n        maxDist = (this.data[x] > maxDist) ? this.data[x] : maxDist;\n    }\n\n    for (let y = 0, i=0, rgbValue = 0; y < this.height; y++) {\n        for (let x = 0; x < this.width; x++) {\n            let index = (y * this.width + x);\n            if (this.data[index] > 3) {\n                rgbValue = 255*this.data[index]/maxDist;\n                res.data[i] = rgbValue;\n                res.data[i+1] = rgbValue;\n                res.data[i+2] = rgbValue;\n                res.data[i+3] = 255;\n            } else {\n                res.data[i] = 255;\n                res.data[i+1] = 255;\n                res.data[i+2] = 255;\n                res.data[i+3] = 255;\n            }\n            i+=4;\n        }\n    }\n\n    return res;\n};\n\nmodule.exports = IntDistanceImage;\n","\"use strict\";\n\nvar Point2D = function(x, y){\n  this.x = x;\n  this.y = y;\n};\n\nPoint2D.prototype.distanceToOrigin = function(p){\n    var x = this.x;\n    var y = this.y;\n    return Math.sqrt(x*x+y*y);\n}\n\nPoint2D.prototype.distanceTo = function(p){\n    var x = this.x-p.x;\n    var y = this.y-p.y;\n    return Math.sqrt(x*x+y*y);\n}\n\nPoint2D.prototype.barycenter = function(p1,p2,w1,w2){\n    var t = w2/(w1+w2);\n    this.x = (1-t)*p1.x +t*p2.x;\n    this.y = (1-t)*p1.y +t*p2.y;\n    return this;\n}\n\nmodule.exports = Point2D;\n\n","\"use strict\";\n\n/**\n *  @param {BinaryImage} source The source image in binary\n *  @param {number} uncolored The pixel value of source that will be considered as uncolored. Usually 0, but can be 1.\n *  @param {number} max_iter Maximum iteration for the skeletonizing algoritm.\n *  @param {IntDistanceImage} distance_image The distance image from which the skeleton will be computed\n */\nvar SkeletonImage = function(source, uncolored, max_iter, distance_image) {\n\n    this.width = source.width;\n    this.height = source.height;\n\n    this.data = new Array(this.width*this.height);\n\n    for (let k = 0; k < this.width*this.height; k++) {\n        if (source.data[k] != uncolored){\n            this.data[k] = 1;\n        } else {\n            this.data[k] = 0 ;\n        }\n    }\n\n    let maxDist = 0;\n    for (let x = 0; x < distance_image.width*distance_image.height; x++) {\n        maxDist = (distance_image.data[x] > maxDist) ? distance_image.data[x] : maxDist;\n    }\n\n    // Ensure that border pixel will not fuck the whole thing up\n    this.CleanBorderPixels();\n\n    //this.skeletonizeEckhardtMaderlechner93(maxIter, distance_image, distance_image.getCoeff()*4);\n    this.skeletonizeEckhardtMaderlechner93(max_iter, distance_image, maxDist*0.8);\n    //ComputeMinMaxWeight(distance_image);\n\n    // Post processing to improve skeleton quality\n    //setInteriorStatus();\n    this.CleanBorderPixels();\n    this.thin();\n    //setEndPoints();\n};\n\nSkeletonImage.prototype.constructor = SkeletonImage;\n\nSkeletonImage.prototype.getIndex = function(x,y){\n  return y*this.width+x;\n};\nSkeletonImage.prototype.getXFromIndex = function(idx){\n    return idx % this.width;\n};\nSkeletonImage.prototype.getYFromIndex = function(idx){\n  return Math.floor(idx / this.width);\n};\n\n/**\n *\n *  @param {Array.<number>} The background color , default to white if undefined or null.\n *  @param {Array.<number>} The skeleton color , default to red if undefined or null.\n *  @return {ImageData} An ImageData on which the skeleton is drawn according to required colors.\n */\nSkeletonImage.prototype.getImageData = function(bgColor, skelColor){\n    var res = new ImageData(this.width, this.height);\n\n    var bg_c = bgColor ? bgColor : [255,255,255,255];\n    var skel_c = skelColor ? skelColor : [255,0,0,255];\n\n    let maxDist = 0;\n    for (let x = 0; x < this.width*this.height; x++) {\n        maxDist = (this.data[x] > maxDist) ? this.data[x] : maxDist;\n    }\n    for (let y = 0, i=0, rgbValue = 0; y < this.height; y++) {\n        for (let x = 0; x < this.width; x++) {\n            let index = (y * this.width + x);\n            if (this.data[index] === 1) {\n                res.data[i]   = skel_c[0];\n                res.data[i+1] = skel_c[1];\n                res.data[i+2] = skel_c[2];\n                res.data[i+3] = skel_c[3];\n            } else {\n                res.data[i]   = bg_c[0];\n                res.data[i+1] = bg_c[1];\n                res.data[i+2] = bg_c[2];\n                res.data[i+3] = bg_c[3];\n            }\n            i+=4;\n        }\n    }\n    return res;\n};\n\n// set all bit of border pixels to 0\nSkeletonImage.prototype.CleanBorderPixels = function() {\n    for (let i = 0; i < this.width; i++){\n        this.data[i] = 0;\n        this.data[(this.height-1)*this.width + i] = 0;\n    }\n\n    for (let j = 1; j < this.height-2; j++){\n        this.data[j*this.width] = 0;\n        this.data[j*this.width + (this.width-1)] = 0;\n    }\n};\n\n\nSkeletonImage.prototype.thin = function()\n{\n  let index = this.width -2;\n  for (let i = 1; i < this.height - 1; i++)\n  {\n    index += 2;\n    for (let j = 1; j < this.width - 1; j++)\n    {\n      index ++;\n      if ((this.data[index] & 1) == 0)\n      continue;\n\n      const voisins = this.getCurrentNeighborhood(index);\n\n      if (((voisins & 7) == 0 && (voisins & 112) == 112) ||\n      ((voisins & 14) == 0 && (voisins & 160) == 160) ||\n      ((voisins & 28) == 0 && (voisins & 193) == 193) ||\n      ((voisins & 56) == 0 && (voisins & 130) == 130) ||\n      ((voisins & 112) == 0 && (voisins & 7) == 7) ||\n      ((voisins & 224) == 0 && (voisins & 10) == 10) ||\n      ((voisins & 193) == 0 && (voisins & 28) == 28) ||\n      ((voisins & 131) == 0 && (voisins & 40) == 40))\n      this.data[index] = 0;\n    }\n  }\n  return this.data;\n};\n\n\n/**\n* Skeleton's extraction algorithm based on U. Eckhardt and G. Maderlechner, Invariant Thinning, 1993.\n*\n* @author Adeline Pihuit 21/01/09\n*\n* @param ???\n*/\nSkeletonImage.prototype.skeletonizeEckhardtMaderlechner93 = function(maxIter,distance_image,threshold) {\n\n  const size = this.width*this.height;\n\n  //assert(distance_image.width() == this.width && distance_image.height() == this.height);\n\n  const flag = new Array(this.width*this.height); //interior (2) or boundary (1) pixel\n  const flagSN = new Array(this.width* this.height); // nb strong neighbors\n  const flagN = new Array(this.width*this.height); // nb neighbors\n  const flagIBP = new Array(this.width*this.height); // Inner Boundary Pixel\n  const flagPIBP = new Array(this.width*this.height); // Perfect Inner Boundary Pixel\n  const flagSBP = new Array(this.width*this.height); // Simple Boundary Pixel\n  const flagEnd = new Array(this.width*this.height); // Resulting image\n  const flagDbg = new Array(this.width*this.height); // Temporary image : color pixel\n\n  let found = true;\n  let iter = 0;\n  const inf = this.width + 1;\n  const sup = size - this.width - 1;\n\n  while (found && iter < maxIter){\n\n    found = false;\n\n    // First test : Interior/Boundary/Background\n\n    let tabBoundaryPixel = [];\n    for (let k = inf; k < sup; k++)\n    {\n      flagSN[k] = this.getNbStrongNeighbors(this.data, k ); // ptrFlagSN : nb Strong Neighbors\n\n      flagN[k] = flagSN[k] + this.getNbNoStrongNeighbors(this.data, k); // ptrFlagN : nb neighbors not strong\n\n      if (this.data[k]) {\n        // Interior Pixel (2) : 4 strong neighbors \"on\"\n        if (flagSN[k] == 4)\n        {\n          flag[k] = 2;\n          flagDbg[k] = 1;\n        }\n        // Boundary Pixel (1)\n        else\n        {\n          flag[k] = 1;\n          flagDbg[k] = 2;\n          tabBoundaryPixel.push(k);\n        }\n      } else {\n        flag[k] = 0;\n      }\n    } // end for\n\n\n\n    // 2nd test : IBP\n    // Inner Boundary Pixel = boundary pixel (1) having an interior pixel (2) as strong neighbor\n    for (let k = inf; k < sup; k++)\n    {\n      if (this.data[k]){\n        flagIBP[k] = (flag[k] == 1) && ((flag[k+1] == 2) || (flag[k-1] == 2) || (flag[k+this.width] == 2) || (flag[k-this.width] == 2));\n      } else {\n        flagIBP[k] = false;\n      }\n\n      if (flagIBP[k]){\n        flagIBP[k] = 1;\n        flagDbg[k] = 3;\n      } else {\n        flagIBP[k] = 0;\n      }\n\n\n    } // end for\n\n    // 3rd test : SBP\n    // Simple Boundary Pixel = boundary pixel with exactly one strong connected component in its neighborhood and this component is strongly connected to itself\n    const tabSBP = [];\n    for (let k = inf; k < sup; ++k)\n    {\n      if (this.data[k] && flag[k] == 1){\n        let p0 = (this.data[k + 1] & 1) != 0;\n        let p1 = (this.data[k - this.width + 1] & 1) != 0;\n        let p2 = (this.data[k - this.width] & 1) != 0;\n        let p3 = (this.data[k - this.width - 1] & 1) != 0;\n        let p4 = (this.data[k - 1] & 1) != 0;\n        let p5 = (this.data[k + this.width - 1] & 1) != 0;\n        let p6 = (this.data[k + this.width] & 1) != 0;\n        let p7 = (this.data[k + this.width + 1] & 1) != 0;\n\n        const trans = (1 - p0) * p1 + (1 - p1) * p2 + (1 - p2) * p3 +\n        (1 - p3) * p4 + (1 - p4) * p5 + (1 - p5) * p6 + (1 - p6) * p7 + (1 - p7) * p0;\n\n        const b = p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7;\n\n        const d = ((trans == 1) || (trans == 0 && b == 8));\n\n        flagSBP[k] = (flag[k] == 1) && (d && (p0 || p2 || p4 || p6));\n      } else {\n        flagSBP[k] = false;\n      }\n      if (flagSBP[k]){\n        flagDbg[k] = 4;\n        tabSBP.push(k);\n      }\n\n    } // end for\n\n    // 4th test : PIBP\n    // Perfect Inner Boundary Pixel = inner boundary pixel whose pixel ptrSkel = (strong neighbor + 4) --> off()\n    const tabPIBP = [];\n    for (let k = inf; k < sup; ++k)\n    {\n      if (this.data[k]){\n        const b0 = ((flag[k+1] == 2) && !this.data[k-1]);\n        const b1 = ((flag[k-1] == 2) && !this.data[k+1]);\n        const b2 = ((flag[k+ this.width] == 2) && !this.data[k-this.width]);\n        const b3 = ((flag[k-this.width] == 2) && !this.data[k+this.width]);\n        flagPIBP[k] = (flagIBP[k] && (b0 || b1 || b2 || b3));\n      } else {\n        flagPIBP[k] = false;\n      }\n      if (flagPIBP[k]){\n        flagDbg[k] = 5;\n        tabPIBP.push(k);\n      }\n\n    } // end for\n\n    // pixels to remove\n  for (let k = 0; k < size; ++k)\n    {\n      if (this.data[k])\n      {\n        if (flagSBP[k] && flagPIBP[k])\n        {\n          flagEnd[k] = 0;\n          flagDbg[k] = 6;\n          found = true;\n        }\n        else\n        {\n          if (flagN[k] == 0){ // 0 neighbors!\n            flagEnd[k] = 0;\n          } else if ((distance_image.data[k] < threshold && flagN[k] == 1))\n          {\n            flagEnd[k] = 0;\n            found = true;\n          }\n          else{\n            flagEnd[k] = 1;\n\n          }\n        }\n      }\n      else\n      {\n        flagEnd[k] = 0;\n        flagDbg[k] = 0;\n      }\n    } // end for\n\n    for (let i=0; i< flagEnd.length; i++){\n      this.data[i] = flagEnd[i];\n    }\n\n    ++iter;\n\n  } // end while\n\n\n};\n\n/**\n* Encode the neighborhood of the pixel.\n* Each bit corresponds to whether or not a pixel contains informations in\n* a determined place.\n* The following table describes the place of each bit in the neighborhood\n*     ---w--->\n*  |  |0|1|2|\n*  h  |7| |3|\n*  |  |6|5|4|\n*  V\n* @param ptrPix a pointer towards the neighborhood wanted pixel\n* @return The encoded neighborhood\n*/\nSkeletonImage.prototype.getCurrentNeighborhood = function(indexPixel)\n{\n    var tab = this.data;\n    // encode the neighborhood of the pixel\n    return (\n        ((tab[indexPixel - 1] & 1)                  << 7) |\n        ((tab[indexPixel + 1] & 1)                  << 3) |\n        (( tab[indexPixel + this.width] & 1)        << 5) |\n        ((tab[indexPixel- this.width] & 1)          << 1) |\n        ( tab[indexPixel - (this.width + 1)] & 1)          |\n        ((tab[indexPixel -(this.width - 1)] & 1)    << 2) |\n        ((tab[indexPixel + (this.width - 1)] & 1)   << 6) |\n        ((tab[indexPixel + (this.width + 1)] & 1)   << 4)\n    );\n};\n\n/**\n* ???\n*\n* @author Adeline Pihuit 21/01/09\n*\n* @param ???\n* @return ???\n*/\nSkeletonImage.prototype.nbNeighbours = function(neighbours)\n{\n    return  (neighbours & 1) + ((neighbours >> 1) & 1) + ((neighbours >> 2)\n            & 1) + ((neighbours >> 3) & 1) + ((neighbours >> 4) & 1) +\n            ((neighbours >> 5) & 1) + ((neighbours >> 6) & 1) +\n            ((neighbours >> 7) & 1);\n};\n\n\nSkeletonImage.prototype.getNbStrongNeighbors = function(tab, valeurPix) {\n    return (tab[valeurPix -1] + tab[valeurPix +1] +\n            tab[valeurPix - this.width] + tab[valeurPix + this.width]);\n};\n\nSkeletonImage.prototype.getNbNoStrongNeighbors = function(tab, valeurPix)\n{\n    return (tab[valeurPix - 1 - this.width] + tab[valeurPix -1 + this.width] +\n    tab[valeurPix + 1 - this.width] + tab[valeurPix + 1 + this.width]);\n};\n\nSkeletonImage.prototype.isInnerBoundaryPixel = function (tab, valeurPix)\n{\n    return ((tab[valeurPix] == 1) && (tab[valeurPix -1] == 2) || (tab[valeurPix +1] == 2) ||\n    (tab[valeurPix - this.width] == 2) || (tab[valeurPix + this.width] == 2));\n};\n\nSkeletonImage.prototype.isSimpleBoundaryPixel = function(tab,valeurPix) {\n\n    let p0 = (tab[valeurPix + 1] & 1) != 0;\n    let p1 = (tab[valeurPix - this.width + 1] & 1) != 0;\n    let p2 = (tab[valeurPix - this.width] & 1) != 0;\n    let p3 = (tab[valeurPix - this.width - 1] & 1) != 0;\n    let p4 = (tab[valeurPix - 1] & 1) != 0;\n    let p5 = (tab[valeurPix + this.width - 1] & 1) != 0;\n    let p6 = (tab[valeurPix + this.width] & 1) != 0;\n    let p7 = (tab[valeurPix + this.width + 1] & 1) != 0;\n\n    const trans = (1 - p0) * p1 + (1 - p1) * p2 + (1 - p2) * p3 +\n    (1 - p3) * p4 + (1 - p4) * p5 + (1 - p5) * p6 + (1 - p6) * p7 + (1 - p7) * p0;\n\n    const b = p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7;\n\n    const d = ((trans == 1) || (trans == 0 && b == 8));\n\n    return (d && (p0 || p2 || p4 || p6));\n};\n\nmodule.exports = SkeletonImage;","\"use strict\";\n\n/**\n *  Main class for a skeleton node in an image.\n *  Must be unique for each pixel.\n *  @param {Point2D} position The position of the node. Can be anything in [x+1[ [y+1[\n */\nvar SkeletonNode = function(position, weight){\n  this.position = position;\n  this.weight = weight;\n  this.neighbors = new Map();\n};\n\n/**\n *  Compute the key of a node in neighbors maps, given its x,y positions.\n */\nSkeletonNode.computeKey = function(x,y){\n    return Math.floor(x)+\";\"+Math.floor(y);\n}\n/**\n *  Return x,y in an array of 2 elements\n */\nSkeletonNode.getXYFromKey = function(key){\n    var res = key.split(\";\");\n    res[0] = parseInt(res[0]);\n    res[1] = parseInt(res[1]);\n    return res;\n}\n\nSkeletonNode.prototype.constructor = SkeletonNode;\n\n// Getters\nSkeletonNode.prototype.getKey = function(){\n    return SkeletonNode.computeKey(this.position.x,this.position.y);\n}\n\nSkeletonNode.prototype.getPosition = function(){\n  return this.position;\n};\n\nSkeletonNode.prototype.getWeight = function(){\n  return this.weight;\n};\n\nSkeletonNode.prototype.getNeighbors = function(){\n  return this.neighbors;\n};\n\n// Setters\nSkeletonNode.prototype.setPosition = function(position){\n  this.position = position;\n};\n\nSkeletonNode.prototype.setWeight = function(weight){\n  this.weight = weight;\n};\n\nSkeletonNode.prototype.setNeighbors = function(neighbors){\n  this.neighbors = neighbors;\n};\n\nSkeletonNode.prototype.addNeighbor = function(n){\n  this.neighbors.set(n.getKey(),n);\n  n.neighbors.set(this.getKey(),this);\n};\n\nSkeletonNode.prototype.removeNeighbor = function(n){\n  this.neighbors.delete(n.getKey());\n  n.neighbors.delete(this.getKey());\n};\n\nSkeletonNode.prototype.hasNeighbor = function(n){\n  return this.neighbors.has(n.getKey());\n};\n\nmodule.exports = SkeletonNode;\n","\"use strict\";\n\nvar Vector2D = function(x, y){\n  this.x = x || 0;\n  this.y = y || 0;\n};\n\nVector2D.prototype.length = function(p){\n    var x = this.x;\n    var y = this.y;\n    return Math.sqrt(x*x+y*y);\n};\n\nVector2D.prototype.subPoints = function(p1,p2){\n    this.x = p1.x-p2.x;\n    this.y = p1.y-p2.y;\n    return this;\n};\n\nVector2D.prototype.angle = function () {\n    // computes the angle in radians with respect to the positive x-axis\n    var angle = Math.atan2( this.y, this.x );\n    if ( angle < 0 ) angle += 2 * Math.PI;\n    return angle;\n\n};\n\nmodule.exports = Vector2D;\n\n","\"use strict\";\n\nconst SkeletonNode = require(\"./SkeletonNode\");\nconst Point2D = require(\"./Point2D\");\nconst Vector2D = require(\"./Vector2D\");\n\nvar Skeletonizer = function(skel_img, dist_img){\n    this.skelImg = skel_img;\n    this.distImg = dist_img;\n};\n\nSkeletonizer.prototype.constructor = Skeletonizer;\n\n/**\n *  Improvements notes :\n *      - Currently the weight factor is used to split while processing a branch, compared to the origin.\n *        It would be better to split only if the difference is to high compared to the linear variation\n *        along a branch.\n *\n *  @param {Object} params\n *  @param {number} params.angle Maximum angle difference allowed along a branch. Default to PI/13.\n *  @param {number} params.weightFactor Maximum factor between the larger and the smaller weights (ie max < factor*min), in [1,+infinity]. Default to 1.25.\n */\nSkeletonizer.prototype.buildHierarchy = function(params){\n\n    var params = params || {};\n\n    // Math.PI/13 correspond to the max angle accepting a set of 4 pixels\n    // Placed as : XXX\n    //                X\n    params.angle = params.angle || Math.PI/13;\n    params.weightFactor = params.weightFactor || 1.25;\n\n    const size = this.skelImg.width*this.skelImg.height;\n\n    let nodes = {};\n    let roots = [];\n    let k = this._findNextPixelWithNeighbors(0);\n    while(k<size){\n        const x = this.skelImg.getXFromIndex(k);\n        const y = this.skelImg.getYFromIndex(k);\n        var key = SkeletonNode.computeKey(x+0.5,y+0.5);\n        if(nodes[key] === undefined){\n            nodes[key] = new SkeletonNode(new Point2D(x+0.5,y+0.5),this.distImg.data[k]/this.distImg.getCoeff());\n            roots.push(nodes[key]);\n            this._recHierarchy(nodes[key], nodes);\n        }\n        k = this._findNextPixelWithNeighbors(k+1);\n    }\n\n    return this._simplifyHierarchy(roots, params.angle, params.weightFactor);\n}\n\n/**\n *  Simplify the hierarchy based on the given angle in radian.\n *  Actually iterate through each branch and remove all pixels such that the\n *  angle with the previous line, or the weihgt difference with the previous point is to big.\n *  @param {Array.<SkeletonNode>} roots\n *  @param {number} angle Maximum angle difference allowed\n *  @param {number} weight_factor Maximum factor between the larger and the smaller weights. in [1,+infinity]\n */\nSkeletonizer.prototype._simplifyHierarchy = function(roots, angle, weight_factor){\n\n    if(weight_factor < 1.0){\n        throw \"weight_factor must be greater than 1 as it compares weight_max and weight_factor*weight_min\";\n    }\n\n    // Process a branch from its root.\n    // Next is the direction in which we are looking\n    var processBranch = function(root, next){\n\n        var tmpv2 = new Vector2D();\n\n        var curr = next;\n        var dir = new Vector2D();\n        var curr_size = curr.getNeighbors().size;\n        var angle_ok = true;\n        var weight_ok = true;\n        var suspect = null;\n        var count = 0;\n        while(curr_size === 2 && angle_ok && weight_ok&& !processed[curr.getKey()]){\n\n            var it = curr.getNeighbors().keys();\n\n            suspect = curr;\n            curr = curr.getNeighbors().get(it.next().value);\n            if(curr === root){\n                curr = suspect.getNeighbors().get(it.next().value);\n            }\n\n            // Update dir using the second pixel on the branch for more accuracy\n            var discard__n = 3; // number of pixels to discard before actually comparing angles and weight\n            if(count < discard__n){\n                dir.x += curr.getPosition().x;\n                dir.y += curr.getPosition().y;\n            }\n            if(count === discard__n-1){\n                dir.x = (dir.x - discard__n*root.getPosition().x)/discard__n;\n                dir.y = (dir.y - discard__n*root.getPosition().y)/discard__n;\n            }\n            count++;\n\n            tmpv2.subPoints(curr.getPosition(),root.getPosition());\n            var a = tmpv2.angle()-dir.angle();\n            if(!(Math.abs(a)<angle || count < discard__n)){\n                angle_ok = false;\n            }\n            if(count >= discard__n){\n                var w_ratio = root.getWeight()/ curr.getWeight();\n                if(w_ratio < 1){ w_ratio = 1/w_ratio; }\n\n                if(w_ratio > weight_factor){\n                    weight_ok = false;\n                }\n            }\n            if(angle_ok && weight_ok){\n                // remove suspect\n                root.removeNeighbor(suspect);\n                curr.removeNeighbor(suspect);\n                root.addNeighbor(curr);\n            }\n\n            processed[suspect.getKey()] = true;\n\n            curr_size = curr.getNeighbors().size;\n        }\n\n        // If it's processed, that means we have reached an existing branch so we just do nothing\n        if(!processed[curr.getKey()]){\n            if(curr_size === 1){\n                if(!angle_ok || !weight_ok){\n                    // The very last pixel is out of constraints.\n                    // 3 choices :\n                    //  - discard it\n                    //  - Make an exception and keep it in the current branch\n                    //  - have it create a 2 pixel branch\n                    // Here we decide to discard it\n                    if(suspect){\n                        suspect.removeNeighbor(curr);\n                    }\n                }\n                // Very small branch of 1 pixel, we discard it\n                if(count === 0){\n                    root.removeNeighbor(curr);\n                }\n                processed[curr.getKey()] = true;\n            }else if(curr_size === 2){ // angle_ok or weihgt_ok must be false\n                // Here the point has gone off the angle constraint but is still on a unique line.\n                // Suspect becames the new root and we go ahead\n                processBranch(suspect,curr)\n                processed[suspect.getKey()] = true;\n            }else{\n                // here the point has more than 2 neighbors so it's a branching point.\n                // We need to get all next branches\n                var nexts = [];\n                curr.getNeighbors().forEach(\n                    function (value, key, map) {\n                        if(value !== suspect && value !== root){\n                            nexts.push(value);\n                        }\n                    }\n                );\n                // Discard the suspect even if it was not verifying the weight and angle checks\n                // We could replace curr with suspect instead but its more complex (TODO ?)\n                if(suspect){\n                    root.removeNeighbor(suspect);\n                    curr.removeNeighbor(suspect);\n                    root.addNeighbor(curr);\n                }\n\n\n                processed[curr.getKey()] = true;\n                // We are branching so we need to disconnect all nexts nodes\n                var neighbors2 = new Map(); // Second degree neighbors\n                for(var i=0; i<nexts.length; ++i){\n                    for(var j=i+1; j<nexts.length; ++j){\n                        nexts[i].removeNeighbor(nexts[j]);\n                    }\n                    nexts[i].getNeighbors().forEach(function(value, key, map){\n                        neighbors2.set(key,value);\n                    });\n                }\n                neighbors2.delete(curr.getKey());\n                // Also, if 2 next nodes share a neighbor, it mus be processed only by one of them.\n                // The more connected will be kept.\n                var vec2 = new Vector2D();\n                neighbors2.forEach(function(n, key, map){\n                    var count = 0;\n                    for(var i=0; i<nexts.length;++i){\n                        if(n.hasNeighbor(nexts[i])){\n                            count++;\n                        }\n                    }\n                    if(count>1){\n                        for(var i=0; i<nexts.length;++i){\n                            if(n.hasNeighbor(nexts[i])){\n                                vec2.subPoints(n.getPosition(),nexts[i].getPosition());\n                                if(vec2.length() > 1){\n                                    n.removeNeighbor(nexts[i]);\n                                }\n                            }\n                        }\n                    }\n                });\n                for(var i=0; i<nexts.length; ++i){\n                    processBranch(curr,nexts[i]);\n                }\n            }\n        }\n    };\n\n    for(var i =0; i<roots.length; ++i){\n        var root = roots[i];\n        var sent = null;\n        if(root.getNeighbors().size > 1){\n            // create a sentinel to manage cases where we immediately have 2 branches.\n            sent = new SkeletonNode(\n                new Point2D(root.getPosition().x,root.getPosition().y-1),\n                root.getWeight()\n            );\n            root.addNeighbor(sent);\n            roots[i] = sent;\n            root = sent;\n            // TODO : remove it afterwards ?\n        }\n\n        var processed = {};\n        processed[root.getKey()] = true;\n        var next = root.getNeighbors().get(root.getNeighbors().keys().next().value);\n\n        processBranch(root, root.getNeighbors().get(root.getNeighbors().keys().next().value));\n    }\n\n    return roots;\n};\n\n/**\n *  Find the next pixel with neighbors after index start.\n */\nSkeletonizer.prototype._findNextPixelWithNeighbors = function(start){\n    const size = this.skelImg.width * this.skelImg.height;\n    let k = start;\n    for (k = start; k < size ; k++){\n        if (this.skelImg.data[k] & 1){\n            if (this.skelImg.getCurrentNeighborhood(k) == 0){\n                this.skelImg.data[k] = 0; // Single skeleton pixels are wiped out.\n            } else {\n                break;\n            }\n        }\n    }\n    return k;\n}\n\n// New : use x,y instead of 1 dimensionnal index\n\n// Private function used in _addNeighbors\n// Return true if a node has been created\nSkeletonizer.prototype._checkAndCreate = function(x,y, node, nodes){\n    var key = SkeletonNode.computeKey(x+0.5,y+0.5);\n    var created = false;\n    if (nodes[key] === undefined){\n        nodes[key] = new SkeletonNode(new Point2D(x+0.5, y+0.5), this.distImg.getValue(x,y)/this.distImg.getCoeff());\n        created = true;\n    }\n    node.neighbors.set(key, nodes[key]);\n    return created;\n};\nSkeletonizer.prototype._addNeighbors = function(node, neighbors, nodes ){\n    const width = this.skelImg.width;\n    const x = Math.floor(node.position.x);\n    const y = Math.floor(node.position.y);\n    let newElement = 0;\n\n    if (neighbors & 1){\n        newElement += this._checkAndCreate(x-1,y-1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 2){\n        newElement += this._checkAndCreate(x,y-1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 4){\n        newElement += this._checkAndCreate(x+1,y-1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 8){\n        newElement += this._checkAndCreate(x+1,y,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 16){\n        newElement += this._checkAndCreate(x+1,y+1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 32){\n        newElement += this._checkAndCreate(x,y+1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 64){\n        newElement += this._checkAndCreate(x-1,y+1,node,nodes) ? 1 : 0;\n    }\n\n    if (neighbors & 128){\n        newElement += this._checkAndCreate(x-1,y,node,nodes) ? 1 : 0;\n    }\n\n    return newElement;\n}\n\n\nSkeletonizer.prototype._addNeighborsOLD = function(node, neighbors, k, nodes ){\n    const width = this.skelImg.width;\n    const x = k % width;\n    const y = Math.round(k / width);\n    let newElement = 0;\n\n    if (neighbors & 1){\n        if (nodes[k-width-1] === undefined){\n            const node = new SkeletonNode(new Point2D(x - 1 + 0.5, (y-1) + 0.5), this.distImg.getIndexValue(k-width-1));\n            nodes[k-width-1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k-width-1, nodes[k-width-1]);\n    }\n\n    if (neighbors & 2){\n        if (nodes[k-width] === undefined){\n            const node = new SkeletonNode(new Point2D(x+ 0.5, (y-1) + 0.5), this.distImg.getIndexValue(k-width));\n            nodes[k-width] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k-width, nodes[k-width]);\n\n    }\n\n    if (neighbors & 4){\n        if (nodes[k-width+1] === undefined){\n            const node = new SkeletonNode(new Point2D(x + 1 + 0.5, (y-1) + 0.5), this.distImg.getIndexValue(k-width + 1));\n            nodes[k-width+1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k-width+1, nodes[k-width+1]);\n    }\n\n    if (neighbors & 8){\n        if (nodes[k+1] === undefined){\n            const node = new SkeletonNode(new Point2D(x+1 + 0.5,y + 0.5), this.distImg.getIndexValue(k+1));\n            nodes[k+1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k+1, nodes[k+1]);\n    }\n\n    if (neighbors & 16){\n        if (nodes[k+width+1] === undefined){\n            const node = new SkeletonNode(new Point2D(x + 1 + 0.5, y + 1 + 0.5), this.distImg.getIndexValue(k+width + 1));\n            nodes[k+width+1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k+width+1, nodes[k+width+1]);\n    }\n\n    if (neighbors & 32){\n        if (nodes[k+width] === undefined){\n            const node = new SkeletonNode(new Point2D(x+ 0.5, (y+1) + 0.5), this.distImg.getIndexValue(k+width));\n            nodes[k+width] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k+width, nodes[k+width]);\n    }\n\n    if (neighbors & 64){\n        if (nodes[k+width-1] === undefined){\n            const node = new SkeletonNode(new Point2D(x - 1+ 0.5, (y+1) + 0.5), this.distImg.getIndexValue(k+width - 1));\n            nodes[k+width-1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k+width-1, nodes[k+width-1]);\n    }\n\n    if (neighbors & 128){\n        if (nodes[k-1] === undefined){\n            const node = new SkeletonNode(new Point2D(x - 1+ 0.5, y + 0.5), this.distImg.getIndexValue(k-1));\n            nodes[k-1] = node;\n            newElement ++;\n        }\n        node.neighbors.set(k-1, nodes[k-1]);\n    }\n\n    return newElement;\n}\n\nSkeletonizer.prototype._recHierarchy = function(node, nodes){\n    const neighbors = this.skelImg.getCurrentNeighborhood(\n        this.skelImg.getIndex(\n            Math.floor(node.position.x),\n            Math.floor(node.position.y),\n        )\n    );\n    const newElement = this._addNeighbors(node, neighbors, nodes );\n    if (newElement){\n        for (let [cle, valeur] of node.getNeighbors()){\n            this._recHierarchy(valeur, nodes);\n        }\n    }\n}\n\nmodule.exports = Skeletonizer;\n\n","\"use strict\";\n\nconst Vector2D = require(\"./Vector2D\");\nconst Point2D = require(\"./Point2D\");\n\n// This function is just computing the distance to a capsule\n// Usefull to know exactly which part of the image is already covered\nvar capsuleDistance = (function(){\n    var unit_dir = new Vector2D();\n    var v = new Vector2D();\n    var proj = new Point2D();\n    return function(p1,p2,r1,r2,p){\n\n\n        var rdiff = r2 - r1;\n        unit_dir.x = p2.x-p1.x;\n        unit_dir.y = p2.y-p1.y;\n\n        var length = unit_dir.length();\n        unit_dir.x = unit_dir.x/length;\n        unit_dir.y = unit_dir.y/length;\n\n        v.subPoints(p,p1);\n\n        var p1p_l = v.length();\n        var p1p_sqrl = p1p_l*p1p_l;\n\n        // In unit_dir basis, vector (this.r1-this.r2, this.length) is normal to the \"weight line\"\n        // We need a projection in this direction up to the segment line to know in which case we fall.\n\n        var x_p_2D = v.x*unit_dir.x + v.y*unit_dir.y;\n        // pythagore inc.\n        var y_p_2D = Math.sqrt(\n            Math.max( // Necessary because of rounded errors, pyth result can be <0 and this causes sqrt to return NaN...\n                0.0, p1p_sqrl - x_p_2D*x_p_2D // =  y_p_2D² by pythagore\n            )\n        );\n        var t = -y_p_2D/length;\n\n        var proj_x = x_p_2D + t*(r1 - r2);\n        // var proj_y = 0.0; // by construction\n\n        // Easy way to compute the distance now that we have the projection on the segment\n        var a = proj_x/length;\n        if(a>1.0){a=1.0;}\n        if(a<0.0){a=0.0;}\n\n        proj.x = p1.x;\n        proj.y = p1.y;\n        proj.x += ( p2.x - proj.x ) * a;// compute the actual 3D projection\n        proj.y += ( p2.y - proj.y ) * a;\n        proj.z += ( p2.z - proj.z ) * a;\n\n        v.x = p.x-proj.x;\n        v.y = p.y-proj.y;\n        var l = v.length();\n\n        return l - (a*r2+(1.0-a)*r1);\n    };\n})();\n\n\nmodule.exports = capsuleDistance;\n\n","\"use strict\";\n\nconst SkeletonNode = require(\"./SkeletonNode\");\nconst Point2D = require(\"./Point2D\");\nconst CapsuleDistance = require(\"./CapsuleDistance\");\n\n/**\n *  An experimental skeletonizer which start from extremae and add nodes by growing from there.\n *  Still not good enough.\n */\nvar QuiblierSkeletonizer = function(dist_img){\n    this.distImg = dist_img;\n};\n\nQuiblierSkeletonizer.prototype.constructor = QuiblierSkeletonizer;\n\nQuiblierSkeletonizer.prototype.buildHierarchy = function(){\n\n    var self = this;\n\n    const width = this.distImg.width;\n    const height = this.distImg.height;\n    const size = width*height;\n\n    // Keep track of all candidates to be the next point added.\n    // They are mapped to the node that actually added them as candidate (for linking)\n    var candidates = {};\n\n    // Accepted error in pixels\n    var threshold = 3;\n\n    var nodes_set = {};\n    var nodes = [];\n\n    var covered = new Array(size);\n    for(var i=0; i<covered.length;++i){\n        covered[i] = false;\n    }\n\n    // Add the zone covered by node and update the candidate list\n    var addCover = function(node, father, candidates){\n        var cx = node.position.x;\n        var cy = node.position.y;\n        var pw = node.getPosition();\n        var nw = Math.ceil(node.weight);\n        var fw = father ? Math.ceil(father.getWeight()) : 0;\n        var fp = father ? father.getPosition() : null;\n        var p = new Point2D(0,0);\n\n        var zone = {\n            min:{\n                x: father ? Math.min(pw.x-nw,fp.x-fw) : pw.x-nw,\n                y: father ? Math.min(pw.y-nw,fp.y-fw) : pw.y-nw\n            },\n            max:{\n                x: father ? Math.max(pw.x+nw,fp.x+fw) : pw.x+nw,\n                y: father ? Math.max(pw.y+nw,fp.y+fw) : pw.y+nw\n            }\n        };\n\n        for(var x=zone.min.x; x<zone.max.x; x++){\n            for(var y=zone.min.y; y<zone.max.y; y++){\n                p.x = x;\n                p.y = y;\n                var dist_sq = father ?\n                    CapsuleDistance(node.getPosition(), father.getPosition(), nw, Math.ceil(father.weight), p)\n                    : (x-cx)*(x-cx)+(y-cy)*(y-cy);\n                var condition = father ? dist_sq <=0 : dist_sq <= nw*nw;\n                if(condition){\n                    var idx = y*width+x;\n                    covered[idx] = true;\n                    delete candidates[idx];\n                }\n            }\n        }\n        // fill in new candidates\n        var circumf = Math.PI*2*(node.weight+1);\n        var l = Math.round(circumf);\n        for(var i=0; i<l; ++i){\n            var angle = i*2*Math.PI/l;\n            var x = Math.round(node.position.x + Math.cos(angle)*(node.weight+1));\n            var y = Math.round(node.position.y + Math.sin(angle)*(node.weight+1));\n            var idx = y*width+x;\n            var v = self.distImg.getValue(x,y)/self.distImg.getCoeff();\n            if(!covered[idx] && v > threshold){\n                candidates[idx] = node;\n            }\n        }\n    };\n\n    // find the point with highest distance\n    var max = 0;\n    var max_x = -1;\n    var max_y = -1;\n    for(var x=0; x<width; ++x){\n        for(var y=0; y<height; ++y){\n            var v = this.distImg.getValue(x,y);\n            if(v > max){\n                max = v;\n                max_x = x;\n                max_y = y;\n            }\n        }\n    }\n\n    var first_node = new SkeletonNode(new Point2D(max_x,max_y),max/this.distImg.getCoeff());\n    nodes_set[this.distImg.getIndex(max_x,max_y)] = first_node;\n    nodes.push(first_node);\n    addCover(first_node, null, candidates);\n\n    var counter = 0;\n    var ck = Object.keys(candidates);\n    while(ck.length !== 0 && counter <10000){\n        var max_i = -1;\n        var max_v = 0;\n        for(var i=0; i<ck.length; ++i){\n            var idx = parseInt(ck[i]);\n            if(covered[idx]){\n                delete candidates[ck[i]];\n            }else if(this.distImg.getIndexValue(idx)>max_v){\n                max_v = this.distImg.getIndexValue(idx);\n                max_i = idx;\n            }\n        }\n\n        max_v = max_v / this.distImg.getCoeff();\n        var max_point = new Point2D(this.distImg.getXFromIndex(max_i),this.distImg.getYFromIndex(max_i));\n\n        var father = candidates[max_i];\n        var best_c = {\n            v:max_v,\n            p:new Point2D(max_point.x,max_point.y),\n            idx:max_i\n        };\n\n        // Checking along the segment if there is a better point\n        // Here we check if there is not a better suiting candidate along the line from max_i pixel to its father\n        // A better candidate would be a point which would cover \"almost\" the same surface but be closer to the father.\n        var checkCandidateBestFit = function(){\n            var dist = father.getPosition().distanceTo(max_point);\n            var p = new Point2D(0,0);\n            for(var t=1; t<dist; t+=1.0){ // 1 pixel step\n                // Barycentre de 2 points ?\n                var ratio = t/dist;\n                p.barycenter(max_point, father.getPosition(), 1-ratio, ratio);\n                p.x = Math.round(p.x);\n                p.y = Math.round(p.y);\n                var v = self.distImg.getValue(p.x,p.y)/self.distImg.getCoeff();\n                var diff = t+max_v-v;\n                // I guess the expected v in a capsule at p is the linear variation of the values but not sure about that. TODO : check\n                var expected_v = (1-ratio)*max_v + ratio*father.weight;\n                if( diff < 1 // Could have used threshold instead of 1 pix, but it seemd intuitively that it could reduce the result quality\n                    && v > expected_v){ // we found a better candidate.\n                    best_c.v = v;\n                    best_c.p.x = p.x;\n                    best_c.p.y = p.y;\n                    best_c.idx = self.distImg.getIndex(p.x,p.y)\n                }\n            }\n        };\n\n        // Check if there is a better candidate\n        // A better ccandidate is either a point on the line to the father which has a higher distance than expected\n        var checkCandidateHighest = function(){\n            var dist = father.getPosition().distanceTo(max_point);\n            var p = new Point2D(0,0);\n            for(var t=1; t<dist; t+=1.0){ // 1 pixel step\n                // Barycentre de 2 points ?\n                var ratio = t/dist;\n                p.barycenter(max_point, father.getPosition(), 1-ratio, ratio);\n                p.x = Math.round(p.x);\n                p.y = Math.round(p.y);\n                var v = self.distImg.getValue(p.x,p.y)/self.distImg.getCoeff();\n                // I guess the expected v in a capsule at p is the linear variation of the values but not sure about that. TODO : check\n                var expected_v = (1-ratio)*max_v + ratio*father.weight;\n                if(v > expected_v){ // we found a better candidate.\n                    best_c.v = v;\n                    best_c.p.x = p.x;\n                    best_c.p.y = p.y;\n                    best_c.idx = self.distImg.getIndex(p.x,p.y)\n                }\n            }\n        };\n\n        // Split the segment and ckeck if the point is threshold-far from the highest distance in its neighborhood.\n        var checkCandidateMid = function(){\n            var dist = father.getPosition().distanceTo(max_point);\n            var mid = new Point2D(0,0);\n            mid.barycenter(max_point, father.getPosition(), 0.5, 0.5);\n            mid.x = Math.round(mid.x);\n            mid.y = Math.round(mid.y);\n            var v = self.distImg.getValue(mid.x,mid.y)/self.distImg.getCoeff();\n\n            var p = new Point2D(0,0);\n\n            var dir = new Point2D(\n                max_point.x-father.getPosition().x,\n                max_point.y-father.getPosition().y\n            );\n            dir.x /= dist;\n            dir.y /= dist;\n            var ort_dir = new Point2D(-dir.y,dir.x);\n\n            var best_neigh = {\n                v:v,\n                p:new Point2D(mid.x,mid.y),\n                idx:max_i\n            };\n\n            var limit = Math.max(father.getWeight()/2, threshold); // don't look too far\n            for(var t=-limit; t<=limit; t++){\n                p.x = Math.round(mid.x + t*ort_dir.x);\n                p.y = Math.round(mid.y + t*ort_dir.y);\n                var cv = self.distImg.getValue(p.x,p.y)/self.distImg.getCoeff();\n                if(cv>best_neigh.v && cv > v+threshold/2){ // we dont want to add a point it it does not help us win at least the threshold\n                    best_neigh.v = cv;\n                    best_neigh.p.x = p.x;\n                    best_neigh.p.y = p.y;\n                }\n            }\n            if(best_neigh.p.x !== mid.x || best_neigh.p.y !== mid.y){\n                best_c.v = best_neigh.v;\n                best_c.p.x = best_neigh.p.x;\n                best_c.p.y = best_neigh.p.y;\n                best_c.idx = self.distImg.getIndex(best_neigh.p.x,best_neigh.p.y);\n                return true;\n            }else{\n                return false;\n            }\n        };\n\n        if(!checkCandidateMid()){\n            checkCandidateBestFit();\n        }\n        //checkCandidateHighest();\n\n        var new_node = new SkeletonNode(best_c.p,best_c.v);\n        new_node.neighbors.set(this.distImg.getIndex(father.position.x, father.position.y), father);\n        father.neighbors.set(this.distImg.getIndex(new_node.position.x, new_node.position.y), new_node);\n\n        nodes_set[best_c.idx] = new_node;\n        nodes.push(new_node);\n        delete candidates[max_i]; // should we really ?\n        delete candidates[best_c.idx]; // should be undefined anyway since it was picked in the influence of the father node\n        addCover(new_node, father, candidates);\n\n        ck = Object.keys(candidates);\n        counter++;\n    }\n\n    return nodes;\n};\n\nmodule.exports = QuiblierSkeletonizer;\n\n","\nimport BinaryImage from \"./Image/BinaryImage.js\";\nimport IntDistanceImage from \"./Image/IntDistanceImage.js\";\n\nimport Point2D from \"./Skeletonizer/Point2D.js\";\nimport SkeletonImage from \"./Skeletonizer/SkeletonImage.js\";\nimport Skeletonizer from \"./Skeletonizer/Skeletonizer.js\";\nimport QuiblierSkeletonizer from \"./Skeletonizer/QuiblierSkeletonizer.js\";\n\nimport CapsuleDistance from \"./Skeletonizer/CapsuleDistance.js\";\n\nlet skeletonize = function(img_data, angle, weight_factor){\n\n    var binary_img  = new BinaryImage(img_data);\n    var dist_img    = new IntDistanceImage(3,4, binary_img, 0);\n    var skel_img    = new SkeletonImage(binary_img, 0, 2000, dist_img);\n    var skeletonizer = new Skeletonizer(skel_img, dist_img);\n\n    return {\n        skeleton  : skeletonizer.buildHierarchy({\n            angle:angle ? angle : undefined,\n            weightFactor:weight_factor ? weight_factor : undefined\n        }),\n        binaryImg : binary_img,\n        distImg   : dist_img,\n        skelImg   : skel_img\n    };\n};\n\n/**\n *  Experimental alternative algorithm for skeletonization.\n */\nlet skeletonizeQ = function(img_data){\n\n    var binary_img  = new BinaryImage(img_data);\n    var dist_img    = new IntDistanceImage(3,4, binary_img, 0);\n    var skeletonizer = new QuiblierSkeletonizer(dist_img);\n\n    var h = skeletonizer.buildHierarchy();\n    return {\n        skeleton  : h,\n        binaryImg : binary_img,\n        distImg   : dist_img\n    };\n};\n\n/**\n *  @param {Array.<SkeletonNode>} h A hierarchy built with buildHierarchy of a Skeletonizer.\n *  @param {ImageData} dist_img The image data in which the hiearchy must be drawn (don't forget to clone it if necessary, it will be modified)\n *  @param {string} mode Either \"circle\" or \"capsule\" to draw only the node of the graph or the entire capsule cover.\n */\nlet drawHierarchyInImageData = function(h, img_data, mode){\n    var res = img_data;\n\n    var capsule = mode === \"capsule\";\n\n    var p = new Point2D();\n\n    var nodes_set = {};\n    var nodes = [];\n    var segs = [];\n\n    var recFindAllNodes = function(node){\n        var k = node.getKey();\n        if(nodes_set[k] === undefined){\n            nodes_set[k] = node;\n            nodes.push(node);\n            node.getNeighbors().forEach(function(value, key, map) {\n                var vk = value.getKey();\n                if(nodes_set[vk] === undefined){\n                    segs.push([node,value]);\n                }\n                recFindAllNodes(value);\n            });\n        }\n    };\n    for(var i=0; i<h.length; ++i){\n        recFindAllNodes(h[i]);\n    }\n\n    for(var x=0; x<res.width; ++x){\n        for(var y=0; y<res.height; ++y){\n            var avg_n = 0;\n            p.x = x+0.5;\n            p.y = y+0.5;\n            if(capsule){\n                for(var i=0; i<segs.length; ++i){\n                    var n0 = segs[i][0];\n                    var n1 = segs[i][1];\n                    var dist = CapsuleDistance(n0.getPosition(), n1.getPosition(), n0.getWeight(), n1.getWeight(), p)\n                    if(dist<=0){\n                        avg_n++;\n                    }\n                }\n            }else{\n                for(var i=0; i<nodes.length; ++i){\n                    var cx = Math.floor(nodes[i].getPosition().x)+0.5;\n                    var cy = Math.floor(nodes[i].getPosition().y)+0.5;\n                    if((p.x-cx)*(p.x-cx)+(p.y-cy)*(p.y-cy) <= nodes[i].getWeight()*nodes[i].getWeight()){\n                        avg_n++;\n                    }\n                }\n            }\n            var idx = 4*(y*res.width+x);\n            res.data[idx+1] = (res.data[idx+1]+avg_n*255)/(avg_n+1);\n        }\n    }\n\n    for(var i=0; i<nodes.length; ++i){\n        var n = nodes[i];\n        var idx = 4*(Math.floor(n.position.y)*res.width+Math.floor(n.position.x));\n        res.data[idx] = 255;\n        res.data[idx+1] = 0;\n        res.data[idx+2] = 0;\n    }\n\n    return res;\n};\n\n/**\n *  Draw the actual skeleton by connecting points with straight lines.\n *  @param {Array.<SkeletonNode>} skel The hierarchy to draw.\n *  @param {Canvas} cvs An HTML5 Canvas. Dimensions must be the same as the image dimension on which skel was computed.\n */\nlet drawSkeletonInCanvas = function(skel,cvs){\n    var ctx = cvs.getContext(\"2d\");\n\n    var nodes_set = {};\n    var nodes = [];\n\n    var recFindAllNodes = function(node){\n        var k = node.position.x + \";\" + node.position.y;\n        if(nodes_set[k] === undefined){\n            nodes_set[k] = node;\n            nodes.push(node);\n            node.getNeighbors().forEach(function(value, key, map) {\n                recFindAllNodes(value);\n            });\n        }\n    };\n    for(var i=0; i<skel.length; ++i){\n        recFindAllNodes(skel[i]);\n    }\n\n    for(var i=0; i<nodes.length; ++i){\n        var node = nodes[i];\n        node.getNeighbors().forEach(function(value, key, map) {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = \"#ff0000\";\n            ctx.beginPath();\n            ctx.moveTo(node.position.x, node.position.y);\n            ctx.lineTo(value.position.x, value.position.y);\n            ctx.stroke();\n            ctx.fillStyle = \"#0000ff\";\n            ctx.fillRect(node.position.x, node.position.y,1,1);\n            ctx.fillRect(value.position.x, value.position.y,1,1);\n        });\n    }\n};\n\nexport {\n    Point2D,\n    SkeletonImage,\n    Skeletonizer,\n    QuiblierSkeletonizer,\n    CapsuleDistance,\n    skeletonize,\n    skeletonizeQ,\n    drawHierarchyInImageData,\n    drawSkeletonInCanvas,\n}\n\n\n"],"names":["BinaryImage","require$$0","Point2D","SkeletonNode","Vector2D","require$$1","require$$2","CapsuleDistance","IntDistanceImage","SkeletonImage","Skeletonizer","QuiblierSkeletonizer"],"mappings":";;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIA,aAAW,GAAG,SAAS,MAAM,EAAE,SAAS,CAAC;EAC7C,EAAE,IAAI,CAAC,SAAS,GAAG,SAAS,KAAK,SAAS,GAAG,SAAS,GAAG,EAAE,CAAC;EAC5D,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EAC5B,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;EAC9B,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;EACzD,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;EACjD,CAAC,CAAC;AACF;AACAA,eAAW,CAAC,SAAS,CAAC,WAAW,GAAGA,aAAW,CAAC;AAChD;AACAA,eAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EAC9C,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EACF;EACA;EACA;AACAA,eAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EAC9C,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC;AACF;EACA;EACA;EACA;AACAA,eAAW,CAAC,SAAS,CAAC,iBAAiB,GAAG,SAAS,MAAM,EAAE,SAAS,CAAC;EACrE,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;EACnC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EAC1B,QAAQ,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACtB;EACA,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EAC1F,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B,SAAS,KAAI;EACb,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B,SAAS;AACT;EACA,KAAK;EACL,CAAC,CAAC;AACF;EACA,IAAA,aAAc,GAAGA,aAAW;;EC5C5B,IAAI,WAAW,GAAGC,aAA2B,CAAC;AAC9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,gBAAgB,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC;EAC1D,IAAI,GAAG,EAAE,MAAM,YAAY,WAAW,CAAC,CAAC;EACxC,QAAQ,MAAM,oEAAoE,CAAC;EACnF,KAAK;EACL,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;EACpB,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EAC9B,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;EAChC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;EACtD,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;EACxD,CAAC,CAAC;AACF;EACA,gBAAgB,CAAC,SAAS,CAAC,WAAW,GAAG,gBAAgB,CAAC;AAC1D;EACA,gBAAgB,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC;EACxE,EAAE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;EAClB,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;EACjE,CAAC,CAAC;AACF;EACA,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU;EAChD,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC;EACpB,CAAC,CAAC;AACF;EACA,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACnD,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,gBAAgB,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACnD,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,CAAC,CAAC;EACF,gBAAgB,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,GAAG,CAAC;EACxD,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,gBAAgB,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,GAAG,CAAC;EACxD,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;EAC5B,CAAC,CAAC;EACF,gBAAgB,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,GAAG,CAAC;EACxD,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;EACtC,CAAC,CAAC;AACF;AACA;EACA,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC;AACpF;EACA,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EAC/B,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AACjC;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;EAClC,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,KAAK;EACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;EACrC,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAC/B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;EACxC,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,YAAY,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EACjC,YAAY,IAAI,IAAI,GAAG,CAAC,CAAC;EACzB,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,EAAE;EACjD,gBAAgB,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,gBAAgB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,gBAAgB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACrD,gBAAgB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD;EACA,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EACrF,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EAChE,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EAChE,gBAAgB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;EACxC,aAAa;EACb,SAAS;EACT,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjD,KAAK;EACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EACjC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClD,KAAK;AACL;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;EACrC,QAAQ,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;EACxC,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACxC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS;EAC/C,YAAY;EACZ,gBAAgB,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,gBAAgB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,gBAAgB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,gBAAgB,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;EAC/D,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EAChE,gBAAgB,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;EAChE,gBAAgB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;EAC3E,aAAa;EACb,SAAS;EACT,KAAK;EACL,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,gBAAgB,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,QAAQ,EAAE;AAC9D;EACA,IAAI,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAC;AACnD;EACA,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;EACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACrD,QAAQ,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;EACpE,KAAK;AACL;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC7D,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;EAC7C,YAAY,IAAI,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EAC7C,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;EACtC,gBAAgB,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;EACxD,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;EACvC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;EACzC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;EACzC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpC,aAAa,MAAM;EACnB,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EAClC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACpC,aAAa;EACb,YAAY,CAAC,EAAE,CAAC,CAAC;EACjB,SAAS;EACT,KAAK;AACL;EACA,IAAI,OAAO,GAAG,CAAC;EACf,CAAC,CAAC;AACF;EACA,IAAA,kBAAc,GAAG,gBAAgB;;ECvIjC,IAAIC,SAAO,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;EAC5B,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACb,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACb,CAAC,CAAC;AACF;AACAA,WAAO,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,CAAC,CAAC;EAChD,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,EAAC;AACD;AACAA,WAAO,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;EAC1C,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,EAAC;AACD;AACAA,WAAO,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EACpD,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EACvB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,IAAI,OAAO,IAAI,CAAC;EAChB,EAAC;AACD;AACA,MAAA,SAAc,GAAGA;;ECxBjB;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,aAAa,GAAG,SAAS,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE;AAC1E;EACA,IAAI,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;EAC9B,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAChC;EACA,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAClD;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACrD,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;EACxC,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B,SAAS,MAAM;EACf,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;EAC9B,SAAS;EACT,KAAK;AACL;EACA,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;EACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACzE,QAAQ,OAAO,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;EACxF,KAAK;AACL;EACA;EACA,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC7B;EACA;EACA,IAAI,IAAI,CAAC,iCAAiC,CAAC,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;EAClF;AACA;EACA;EACA;EACA,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;EAC7B,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;EAChB;EACA,CAAC,CAAC;AACF;EACA,aAAa,CAAC,SAAS,CAAC,WAAW,GAAG,aAAa,CAAC;AACpD;EACA,aAAa,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EAChD,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EACF,aAAa,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,GAAG,CAAC;EACrD,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;EAC5B,CAAC,CAAC;EACF,aAAa,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,GAAG,CAAC;EACrD,EAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;EACtC,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA,aAAa,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,OAAO,EAAE,SAAS,CAAC;EACnE,IAAI,IAAI,GAAG,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACrD;EACA,IAAI,IAAI,IAAI,GAAG,OAAO,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACrD,IAAI,IAAI,MAAM,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvD;EACA,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;EACpB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACrD,QAAQ,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;EACpE,KAAK;EACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC7D,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;EAC7C,YAAY,IAAI,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EAC7C,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;EACxC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1C,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1C,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1C,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1C,aAAa,MAAM;EACnB,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,aAAa;EACb,YAAY,CAAC,EAAE,CAAC,CAAC;EACjB,SAAS;EACT,KAAK;EACL,IAAI,OAAO,GAAG,CAAC;EACf,CAAC,CAAC;AACF;EACA;EACA,aAAa,CAAC,SAAS,CAAC,iBAAiB,GAAG,WAAW;EACvD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;EACxC,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACtD,KAAK;AACL;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EAC3C,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EACpC,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrD,KAAK;EACL,CAAC,CAAC;AACF;AACA;EACA,aAAa,CAAC,SAAS,CAAC,IAAI,GAAG;EAC/B;EACA,EAAE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;EAC5B,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;EAC1C,EAAE;EACF,IAAI,KAAK,IAAI,CAAC,CAAC;EACf,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE;EAC3C,IAAI;EACJ,MAAM,KAAK,GAAG,CAAC;EACf,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;EACrC,MAAM,SAAS;AACf;EACA,MAAM,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACzD;EACA,MAAM,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,GAAG;EACvD,OAAO,CAAC,OAAO,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,GAAG,CAAC;EACrD,OAAO,CAAC,OAAO,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,GAAG,CAAC;EACrD,OAAO,CAAC,OAAO,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,KAAK,GAAG,CAAC;EACrD,OAAO,CAAC,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;EAClD,OAAO,CAAC,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,CAAC;EACpD,OAAO,CAAC,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,CAAC;EACpD,OAAO,CAAC,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,KAAK,EAAE,CAAC;EACpD,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAC3B,KAAK;EACL,GAAG;EACH,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC;EACnB,CAAC,CAAC;AACF;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,aAAa,CAAC,SAAS,CAAC,iCAAiC,GAAG,SAAS,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE;AACvG;EACA,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;AACtC;EACA;AACA;EACA,EAAE,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACjD,EAAE,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;EACpD,EAAE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EAClD,EAAE,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpD,EAAE,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACrD,EAAE,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpD,EAAE,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpD,EAAE,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACpD;EACA,EAAE,IAAI,KAAK,GAAG,IAAI,CAAC;EACnB,EAAE,IAAI,IAAI,GAAG,CAAC,CAAC;EACf,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;EAC7B,EAAE,MAAM,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACpC;EACA,EAAE,OAAO,KAAK,IAAI,IAAI,GAAG,OAAO,CAAC;AACjC;EACA,IAAI,KAAK,GAAG,KAAK,CAAC;EAKlB,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;EAClC,IAAI;EACJ,MAAM,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;AAC3D;EACA,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACvE;EACA,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;EACxB;EACA,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;EAC1B,QAAQ;EACR,UAAU,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtB,UAAU,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,SAAS;EACT;EACA;EACA,QAAQ;EACR,UAAU,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtB,UAAU,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEzB,SAAS;EACT,OAAO,MAAM;EACb,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB,OAAO;EACP,KAAK;AACL;AACA;AACA;EACA;EACA;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE;EAClC,IAAI;EACJ,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACxI,OAAO,MAAM;EACb,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC3B,OAAO;AACP;EACA,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;EACrB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvB,OAAO,MAAM;EACb,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvB,OAAO;AACP;AACA;EACA,KAAK;EAKL,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;EAClC,IAAI;EACJ,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACvC,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC7C,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC1D,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACtD,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC1D,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC7C,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC1D,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACtD,QAAQ,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1D;EACA,QAAQ,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE;EACnE,QAAQ,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;AACtF;EACA,QAAQ,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACxD;EACA,QAAQ,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3D;EACA,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACrE,OAAO,MAAM;EACb,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC3B,OAAO;EACP,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;EACrB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEvB,OAAO;AACP;EACA,KAAK;EAKL,IAAI,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;EAClC,IAAI;EACJ,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACvB,QAAQ,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,QAAQ,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzD,QAAQ,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5E,QAAQ,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3E,QAAQ,QAAQ,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EAC7D,OAAO,MAAM;EACb,QAAQ,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC5B,OAAO;EACP,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEvB,OAAO;AACP;EACA,KAAK;AACL;EACA;EACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC;EAC/B,IAAI;EACJ,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACtB,MAAM;EACN,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;EACrC,QAAQ;EACR,UAAU,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,UAAU,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,UAAU,KAAK,GAAG,IAAI,CAAC;EACvB,SAAS;EACT;EACA,QAAQ;EACR,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAC5B,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3B,WAAW,MAAM,KAAK,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;EACzE,UAAU;EACV,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3B,YAAY,KAAK,GAAG,IAAI,CAAC;EACzB,WAAW;EACX,eAAc;EACd,YAAY,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC3B;EACA,WAAW;EACX,SAAS;EACT,OAAO;EACP;EACA,MAAM;EACN,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvB,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvB,OAAO;EACP,KAAK;AACL;EACA,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC;EACzC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,KAAK;AACL;EACA,IAAI,EAAE,IAAI,CAAC;AACX;EACA,GAAG;AACH;AACA;EACA,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,aAAa,CAAC,SAAS,CAAC,sBAAsB,GAAG,SAAS,UAAU;EACpE;EACA,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;EACxB;EACA,IAAI;EACJ,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,sBAAsB,CAAC;EACxD,SAAS,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;EACzD,SAAS,EAAE,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;EACzD,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;EACzD,UAAU,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjD,SAAS,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EACzD,SAAS,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACzD,SAAS,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACzD,MAAM;EACN,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,aAAa,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,UAAU;EAC1D;EACA,IAAI,QAAQ,CAAC,UAAU,GAAG,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC;EAC1E,cAAc,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC;EACpE,aAAa,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC;EAC7D,aAAa,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC;AACF;AACA;EACA,aAAa,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,GAAG,EAAE,SAAS,EAAE;EACxE,IAAI,QAAQ,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;EACjD,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE;EACvE,CAAC,CAAC;AACF;EACA,aAAa,CAAC,SAAS,CAAC,sBAAsB,GAAG,SAAS,GAAG,EAAE,SAAS;EACxE;EACA,IAAI,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;EAC5E,IAAI,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE;EACvE,CAAC,CAAC;AACF;EACA,aAAa,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,GAAG,EAAE,SAAS;EACvE;EACA,IAAI,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACzF,KAAK,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE;EAC9E,CAAC,CAAC;AACF;EACA,aAAa,CAAC,SAAS,CAAC,qBAAqB,GAAG,SAAS,GAAG,CAAC,SAAS,EAAE;AACxE;EACA,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC3C,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACxD,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACpD,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACxD,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC3C,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACxD,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACpD,IAAI,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACxD;EACA,IAAI,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE;EAC/D,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;AAClF;EACA,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACpD;EACA,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvD;EACA,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE;EACzC,CAAC,CAAC;AACF;AACA,MAAA,eAAc,GAAG;;EC1YjB;EACA;EACA;EACA;EACA;EACA,IAAIC,cAAY,GAAG,SAAS,QAAQ,EAAE,MAAM,CAAC;EAC7C,EAAE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACvB,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;EAC7B,CAAC,CAAC;AACF;EACA;EACA;EACA;AACAA,gBAAY,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACvC,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3C,EAAC;EACD;EACA;EACA;AACAA,gBAAY,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC;EACzC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAC7B,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,IAAI,OAAO,GAAG,CAAC;EACf,EAAC;AACD;AACAA,gBAAY,CAAC,SAAS,CAAC,WAAW,GAAGA,cAAY,CAAC;AAClD;EACA;AACAA,gBAAY,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU;EAC1C,IAAI,OAAOA,cAAY,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpE,EAAC;AACD;AACAA,gBAAY,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU;EAC/C,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC;EACvB,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU;EAC7C,EAAE,OAAO,IAAI,CAAC,MAAM,CAAC;EACrB,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU;EAChD,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC;EACxB,CAAC,CAAC;AACF;EACA;AACAA,gBAAY,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,QAAQ,CAAC;EACvD,EAAE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC3B,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,MAAM,CAAC;EACnD,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;EACvB,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,YAAY,GAAG,SAAS,SAAS,CAAC;EACzD,EAAE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;EAC7B,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC;EAChD,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;EACnC,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,CAAC;EACnD,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;EACpC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;EACpC,CAAC,CAAC;AACF;AACAA,gBAAY,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC;EAChD,EAAE,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;EACxC,CAAC,CAAC;AACF;EACA,IAAA,cAAc,GAAGA,cAAY;;ECzE7B,IAAIC,UAAQ,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;EAC7B,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EAClB,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EAClB,CAAC,CAAC;AACF;AACAA,YAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;EACvC,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;AACF;AACAA,YAAQ,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,EAAE,CAAC,EAAE,CAAC;EAC9C,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACvB,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACvB,IAAI,OAAO,IAAI,CAAC;EAChB,CAAC,CAAC;AACF;AACAA,YAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,YAAY;EACvC;EACA,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;EAC7C,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;EAC1C,IAAI,OAAO,KAAK,CAAC;AACjB;EACA,CAAC,CAAC;AACF;EACA,IAAA,UAAc,GAAGA,UAAQ;;ECzBzB,MAAMD,cAAY,GAAGF,cAAyB,CAAC;EAC/C,MAAMC,SAAO,GAAGG,SAAoB,CAAC;EACrC,MAAMD,UAAQ,GAAGE,UAAqB,CAAC;AACvC;EACA,IAAI,YAAY,GAAG,SAAS,QAAQ,EAAE,QAAQ,CAAC;EAC/C,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;EAC5B,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;EAC5B,CAAC,CAAC;AACF;EACA,YAAY,CAAC,SAAS,CAAC,WAAW,GAAG,YAAY,CAAC;AAClD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,YAAY,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,MAAM,CAAC;AACxD;EACA,IAAI,IAAI,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AAC9B;EACA;EACA;EACA;EACA,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;EAC9C,IAAI,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,IAAI,CAAC;AACtD;EACA,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACxD;EACA,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;EACnB,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;EACnB,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;EAChD,IAAI,MAAM,CAAC,CAAC,IAAI,CAAC;EACjB,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;EAChD,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;EAChD,QAAQ,IAAI,GAAG,GAAGH,cAAY,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvD,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;EACpC,YAAY,KAAK,CAAC,GAAG,CAAC,GAAG,IAAIA,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;EACjH,YAAY,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EACnC,YAAY,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;EAClD,SAAS;EACT,QAAQ,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;EAC7E,EAAC;AACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,YAAY,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC;AACjF;EACA,IAAI,GAAG,aAAa,GAAG,GAAG,CAAC;EAC3B,QAAQ,MAAM,6FAA6F,CAAC;EAC5G,KAAK;AACL;EACA;EACA;EACA,IAAI,IAAI,aAAa,GAAG,SAAS,IAAI,EAAE,IAAI,CAAC;AAC5C;EACA,QAAQ,IAAI,KAAK,GAAG,IAAIE,UAAQ,EAAE,CAAC;AACnC;EACA,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC;EACxB,QAAQ,IAAI,GAAG,GAAG,IAAIA,UAAQ,EAAE,CAAC;EACjC,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;EACjD,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC;EAC5B,QAAQ,IAAI,SAAS,GAAG,IAAI,CAAC;EAC7B,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC;EAC3B,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;EACtB,QAAQ,MAAM,SAAS,KAAK,CAAC,IAAI,QAAQ,IAAI,SAAS,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AACnF;EACA,YAAY,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,CAAC;AAChD;EACA,YAAY,OAAO,GAAG,IAAI,CAAC;EAC3B,YAAY,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;EAC5D,YAAY,GAAG,IAAI,KAAK,IAAI,CAAC;EAC7B,gBAAgB,IAAI,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;EACnE,aAAa;AACb;EACA;EACA,YAAY,IAAI,UAAU,GAAG,CAAC,CAAC;EAC/B,YAAY,GAAG,KAAK,GAAG,UAAU,CAAC;EAClC,gBAAgB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;EAC9C,gBAAgB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;EAC9C,aAAa;EACb,YAAY,GAAG,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;EACtC,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC;EAC7E,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC;EAC7E,aAAa;EACb,YAAY,KAAK,EAAE,CAAC;AACpB;EACA,YAAY,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;EACnE,YAAY,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;EAC9C,YAAY,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC;EAC1D,gBAAgB,QAAQ,GAAG,KAAK,CAAC;EACjC,aAAa;EACb,YAAY,GAAG,KAAK,IAAI,UAAU,CAAC;EACnC,gBAAgB,IAAI,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;EACjE,gBAAgB,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE;AACvD;EACA,gBAAgB,GAAG,OAAO,GAAG,aAAa,CAAC;EAC3C,oBAAoB,SAAS,GAAG,KAAK,CAAC;EACtC,iBAAiB;EACjB,aAAa;EACb,YAAY,GAAG,QAAQ,IAAI,SAAS,CAAC;EACrC;EACA,gBAAgB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;EAC7C,gBAAgB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;EAC7C,gBAAgB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;EACvC,aAAa;AACb;EACA,YAAY,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;AAC/C;EACA,YAAY,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;EACjD,SAAS;AACT;EACA;EACA,QAAQ,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;EACrC,YAAY,GAAG,SAAS,KAAK,CAAC,CAAC;EAC/B,gBAAgB,GAAG,CAAC,QAAQ,IAAI,CAAC,SAAS,CAAC;EAC3C;EACA;EACA;EACA;EACA;EACA;EACA,oBAAoB,GAAG,OAAO,CAAC;EAC/B,wBAAwB,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;EACrD,qBAAqB;EACrB,iBAAiB;EACjB;EACA,gBAAgB,GAAG,KAAK,KAAK,CAAC,CAAC;EAC/B,oBAAoB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;EAC9C,iBAAiB;EACjB,gBAAgB,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;EAChD,aAAa,KAAK,GAAG,SAAS,KAAK,CAAC,CAAC;EACrC;EACA;EACA,gBAAgB,aAAa,CAAC,OAAO,CAAC,IAAI,EAAC;EAC3C,gBAAgB,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;EACnD,aAAa,KAAI;EACjB;EACA;EACA,gBAAgB,IAAI,KAAK,GAAG,EAAE,CAAC;EAC/B,gBAAgB,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO;EAC3C,oBAAoB,UAAU,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE;EAC/C,wBAAwB,GAAG,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,CAAC;EAC/D,4BAA4B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC9C,yBAAyB;EACzB,qBAAqB;EACrB,iBAAiB,CAAC;EAClB;EACA;EACA,gBAAgB,GAAG,OAAO,CAAC;EAC3B,oBAAoB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;EACjD,oBAAoB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;EACjD,oBAAoB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;EAC3C,iBAAiB;AACjB;AACA;EACA,gBAAgB,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;EAChD;EACA,gBAAgB,IAAI,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;EAC3C,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACjD,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACvD,wBAAwB,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D,qBAAqB;EACrB,oBAAoB,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;EAC7E,wBAAwB,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAClD,qBAAqB,CAAC,CAAC;EACvB,iBAAiB;EACjB,gBAAgB,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;EACjD;EACA;EACA,gBAAgB,IAAI,IAAI,GAAG,IAAIA,UAAQ,EAAE,CAAC;EAC1C,gBAAgB,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;EACxD,oBAAoB,IAAI,KAAK,GAAG,CAAC,CAAC;EAClC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EACpD,wBAAwB,GAAG,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,4BAA4B,KAAK,EAAE,CAAC;EACpC,yBAAyB;EACzB,qBAAqB;EACrB,oBAAoB,GAAG,KAAK,CAAC,CAAC,CAAC;EAC/B,wBAAwB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EACxD,4BAA4B,GAAG,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,gCAAgC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;EACvF,gCAAgC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACrD,oCAAoC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/D,iCAAiC;EACjC,6BAA6B;EAC7B,yBAAyB;EACzB,qBAAqB;EACrB,iBAAiB,CAAC,CAAC;EACnB,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACjD,oBAAoB,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,iBAAiB;EACjB,aAAa;EACb,SAAS;EACT,KAAK,CAAC;AACN;EACA,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACtC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC;EACxB,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;EACxC;EACA,YAAY,IAAI,GAAG,IAAID,cAAY;EACnC,gBAAgB,IAAID,SAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACxE,gBAAgB,IAAI,CAAC,SAAS,EAAE;EAChC,aAAa,CAAC;EACd,YAAY,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;EACnC,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EAC5B,YAAY,IAAI,GAAG,IAAI,CAAC;EACxB;EACA,SAAS;AACT;EACA,QAAQ,IAAI,SAAS,GAAG,EAAE,CAAC;EAC3B,QAAQ,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC;EACxC,QAAmB,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE;AACpF;EACA,QAAQ,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;EAC9F,KAAK;AACL;EACA,IAAI,OAAO,KAAK,CAAC;EACjB,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,YAAY,CAAC,SAAS,CAAC,2BAA2B,GAAG,SAAS,KAAK,CAAC;EACpE,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;EAC1D,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC;EAClB,IAAI,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC;EACnC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrC,YAAY,IAAI,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EAC5D,gBAAgB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzC,aAAa,MAAM;EACnB,gBAAgB,MAAM;EACtB,aAAa;EACb,SAAS;EACT,KAAK;EACL,IAAI,OAAO,CAAC,CAAC;EACb,EAAC;AACD;EACA;AACA;EACA;EACA;EACA,YAAY,CAAC,SAAS,CAAC,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;EACnE,IAAI,IAAI,GAAG,GAAGC,cAAY,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACnD,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC;EACxB,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;EACjC,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,IAAIA,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;EACrH,QAAQ,OAAO,GAAG,IAAI,CAAC;EACvB,KAAK;EACL,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EACxC,IAAI,OAAO,OAAO,CAAC;EACnB,CAAC,CAAC;EACF,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;EACxE,IAAkB,IAAI,CAAC,OAAO,CAAC,MAAM;EACrC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;AACvB;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACrE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACrE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACrE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,GAAG,CAAC;EACxB,QAAQ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACrE,KAAK;AACL;EACA,IAAI,OAAO,UAAU,CAAC;EACtB,EAAC;AACD;AACA;EACA,YAAY,CAAC,SAAS,CAAC,gBAAgB,GAAG,SAAS,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE;EAC9E,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;EACrC,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;EACxB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;EACpC,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;AACvB;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EAC3C,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxH,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACpC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC;EACzC,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACjH,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;EAClC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD;EACA,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EAC3C,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1H,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACpC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;EACtB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EACrC,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3G,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EAC9B,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EAC3C,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1H,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACpC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC;EACzC,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACjH,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;EAClC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACpD,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EAC3C,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EACzH,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACpC,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,KAAK;AACL;EACA,IAAI,IAAI,SAAS,GAAG,GAAG,CAAC;EACxB,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EACrC,YAAY,MAAM,IAAI,GAAG,IAAIC,cAAY,CAAC,IAAID,SAAO,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7G,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EAC9B,YAAY,UAAU,GAAG,CAAC;EAC1B,SAAS;EACT,QAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK;AACL;EACA,IAAI,OAAO,UAAU,CAAC;EACtB,EAAC;AACD;EACA,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,IAAI,EAAE,KAAK,CAAC;EAC5D,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB;EACzD,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ;EAC7B,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACvC,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACvC,SAAS;EACT,KAAK,CAAC;EACN,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;EACnE,IAAI,IAAI,UAAU,CAAC;EACnB,QAAQ,KAAK,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;EACtD,YAAY,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;EAC9C,SAAS;EACT,KAAK;EACL,EAAC;AACD;AACA,MAAA,cAAc,GAAG;;ECrZjB,MAAM,QAAQ,GAAGD,UAAqB,CAAC;EACvC,MAAMC,SAAO,GAAGG,SAAoB,CAAC;AACrC;EACA;EACA;EACA,IAAI,eAAe,GAAG,CAAC,UAAU;EACjC,IAAI,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;EAClC,IAAI,IAAI,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;EAC3B,IAAI,IAAI,IAAI,GAAG,IAAIH,SAAO,EAAE,CAAC;EAC7B,IAAI,OAAO,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAIlC,QAAQ,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/B,QAAQ,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B;EACA,QAAQ,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;EACvC,QAAQ,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;EACvC,QAAQ,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;AACvC;EACA,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC1B;EACA,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;EAC/B,QAAQ,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;AACnC;EACA;EACA;AACA;EACA,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;EACrD;EACA,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI;EAC9B,YAAY,IAAI,CAAC,GAAG;EACpB,gBAAgB,GAAG,EAAE,QAAQ,GAAG,MAAM,CAAC,MAAM;EAC7C,aAAa;EACb,SAAS,CAAC;EACV,QAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;AAC/B;EACA,QAAQ,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;EAC1C;AACA;EACA;EACA,QAAQ,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;EAC9B,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACzB;EACA,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACtB,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACtB,QAAQ,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;EACxC,QAAQ,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;EACxC,QAAQ,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACxC;EACA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EACzB,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;AAC3B;EACA,QAAQ,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACrC,KAAK,CAAC;EACN,CAAC,GAAG,CAAC;AACL;AACA;AACA,MAAAK,iBAAc,GAAG;;EC5DjB,MAAM,YAAY,GAAGN,cAAyB,CAAC;EAC/C,MAAM,OAAO,GAAGI,SAAoB,CAAC;EACrC,MAAM,eAAe,GAAGC,iBAA4B,CAAC;AACrD;EACA;EACA;EACA;EACA;EACA,IAAI,oBAAoB,GAAG,SAAS,QAAQ,CAAC;EAC7C,IAAI,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;EAC5B,CAAC,CAAC;AACF;EACA,oBAAoB,CAAC,SAAS,CAAC,WAAW,GAAG,oBAAoB,CAAC;AAClE;EACA,oBAAoB,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU;AAC1D;EACA,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC;AACpB;EACA,IAAI,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;EACrC,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;EACvC,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;AAC9B;EACA;EACA;EACA,IAAI,IAAI,UAAU,GAAG,EAAE,CAAC;AACxB;EACA;EACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;AACnB;EACA,IAAI,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;EAClC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EACtC,QAAQ,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC3B,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,GAAG,SAAS,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC;EACrD,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACjC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACjC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;EACpC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACxC,QAAQ,IAAI,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC;EAC5D,QAAQ,IAAI,EAAE,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;EACtD,QAAQ,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC;EACA,QAAQ,IAAI,IAAI,GAAG;EACnB,YAAY,GAAG,CAAC;EAChB,gBAAgB,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;EAC/D,gBAAgB,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;EAC/D,aAAa;EACb,YAAY,GAAG,CAAC;EAChB,gBAAgB,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;EAC/D,gBAAgB,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;EAC/D,aAAa;EACb,SAAS,CAAC;AACV;EACA,QAAQ,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EAChD,YAAY,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EACpD,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,gBAAgB,IAAI,OAAO,GAAG,MAAM;EACpC,oBAAoB,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;EAC9G,sBAAsB,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAClD,gBAAgB,IAAI,SAAS,GAAG,MAAM,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC;EACxE,gBAAgB,GAAG,SAAS,CAAC;EAC7B,oBAAoB,IAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACxC,oBAAoB,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;EACxC,oBAAoB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;EAC3C,iBAAiB;EACjB,aAAa;EACb,SAAS;EACT;EACA,QAAQ,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAChD,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EACpC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9B,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAClF,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAClF,YAAY,IAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EAChC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;EACvE,YAAY,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;EAC9C,gBAAgB,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;EACvC,aAAa;EACb,SAAS;EACT,KAAK,CAAC;AACN;EACA;EACA,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC;EAChB,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;EACnB,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;EACnB,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EAC9B,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACnC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,YAAY,GAAG,CAAC,GAAG,GAAG,CAAC;EACvB,gBAAgB,GAAG,GAAG,CAAC,CAAC;EACxB,gBAAgB,KAAK,GAAG,CAAC,CAAC;EAC1B,gBAAgB,KAAK,GAAG,CAAC,CAAC;EAC1B,aAAa;EACb,SAAS;EACT,KAAK;AACL;EACA,IAAI,IAAI,UAAU,GAAG,IAAI,YAAY,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;EAC5F,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC;EAC/D,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EAC3B,IAAI,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;AAC3C;EACA,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;EACpB,IAAI,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EACrC,IAAI,MAAM,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,EAAE,KAAK,CAAC;EAC5C,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;EACvB,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;EACtB,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACtC,YAAY,IAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;EAC5B,gBAAgB,OAAO,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,aAAa,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;EAC3D,gBAAgB,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;EACxD,gBAAgB,KAAK,GAAG,GAAG,CAAC;EAC5B,aAAa;EACb,SAAS;AACT;EACA,QAAQ,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;EAChD,QAAQ,IAAI,SAAS,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AACzG;EACA,QAAQ,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;EACvC,QAAQ,IAAI,MAAM,GAAG;EACrB,YAAY,CAAC,CAAC,KAAK;EACnB,YAAY,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;EAClD,YAAY,GAAG,CAAC,KAAK;EACrB,SAAS,CAAC;AACV;EACA;EACA;EACA;EACA,QAAQ,IAAI,qBAAqB,GAAG,UAAU;EAC9C,YAAY,IAAI,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;EAClE,YAAY,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC;EACxC;EACA,gBAAgB,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;EACnC,gBAAgB,CAAC,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;EAC9E,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,gBAAgB,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;EAC/E,gBAAgB,IAAI,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACrC;EACA,gBAAgB,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;EACvE,gBAAgB,IAAI,IAAI,GAAG,CAAC;EAC5B,uBAAuB,CAAC,GAAG,UAAU,CAAC;EACtC,oBAAoB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACjC,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,oBAAoB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC;EAC/D,iBAAiB;EACjB,aAAa;EACb,SAAS,CAAC;AAwBV;EACA;EACA,QAAQ,IAAI,iBAAiB,GAAG,UAAU;EAC1C,YAAY,IAAI,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;EAClE,YAAY,IAAI,GAAG,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,YAAY,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EACtE,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC/E;EACA,YAAY,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC;EACA,YAAY,IAAI,GAAG,GAAG,IAAI,OAAO;EACjC,gBAAgB,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;EAClD,gBAAgB,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;EAClD,aAAa,CAAC;EACd,YAAY,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;EAC1B,YAAY,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;EAC1B,YAAY,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACpD;EACA,YAAY,IAAI,UAAU,GAAG;EAC7B,gBAAgB,CAAC,CAAC,CAAC;EACnB,gBAAgB,CAAC,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC1C,gBAAgB,GAAG,CAAC,KAAK;EACzB,aAAa,CAAC;AACd;EACA,YAAY,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;EAClE,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;EAC5C,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACtD,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACtD,gBAAgB,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;EAChF,gBAAgB,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;EACzD,oBAAoB,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;EACtC,oBAAoB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC,oBAAoB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACzC,iBAAiB;EACjB,aAAa;EACb,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EACpE,gBAAgB,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;EACxC,gBAAgB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,gBAAgB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5C,gBAAgB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClF,gBAAgB,OAAO,IAAI,CAAC;EAC5B,aAAa,KAAI;EACjB,gBAAgB,OAAO,KAAK,CAAC;EAC7B,aAAa;EACb,SAAS,CAAC;AACV;EACA,QAAQ,GAAG,CAAC,iBAAiB,EAAE,CAAC;EAChC,YAAY,qBAAqB,EAAE,CAAC;EACpC,SAAS;EACT;AACA;EACA,QAAQ,IAAI,QAAQ,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC3D,QAAQ,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;EACpG,QAAQ,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AACxG;EACA,QAAQ,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;EACzC,QAAQ,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;EAC7B,QAAQ,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;EACjC,QAAQ,OAAO,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;EACtC,QAAQ,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;AAC/C;EACA,QAAQ,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EACrC,QAAQ,OAAO,EAAE,CAAC;EAClB,KAAK;AACL;EACA,IAAI,OAAO,KAAK,CAAC;EACjB,CAAC,CAAC;AACF;AACA,MAAA,sBAAc,GAAG;;AClPd,MAAC,WAAW,GAAG,SAAS,QAAQ,EAAE,KAAK,EAAE,aAAa,CAAC;AAC1D;EACA,IAAI,IAAI,UAAU,IAAI,IAAIN,aAAW,CAAC,QAAQ,CAAC,CAAC;EAChD,IAAI,IAAI,QAAQ,MAAM,IAAIQ,kBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;EAC/D,IAAI,IAAI,QAAQ,MAAM,IAAIC,eAAa,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;EACvE,IAAI,IAAI,YAAY,GAAG,IAAIC,cAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC5D;EACA,IAAI,OAAO;EACX,QAAQ,QAAQ,IAAI,YAAY,CAAC,cAAc,CAAC;EAChD,YAAY,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,SAAS;EAC3C,YAAY,YAAY,CAAC,aAAa,GAAG,aAAa,GAAG,SAAS;EAClE,SAAS,CAAC;EACV,QAAQ,SAAS,GAAG,UAAU;EAC9B,QAAQ,OAAO,KAAK,QAAQ;EAC5B,QAAQ,OAAO,KAAK,QAAQ;EAC5B,KAAK,CAAC;EACN,EAAE;AACF;EACA;EACA;EACA;AACG,MAAC,YAAY,GAAG,SAAS,QAAQ,CAAC;AACrC;EACA,IAAI,IAAI,UAAU,IAAI,IAAIV,aAAW,CAAC,QAAQ,CAAC,CAAC;EAChD,IAAI,IAAI,QAAQ,MAAM,IAAIQ,kBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;EAC/D,IAAI,IAAI,YAAY,GAAG,IAAIG,sBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC1D;EACA,IAAI,IAAI,CAAC,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;EAC1C,IAAI,OAAO;EACX,QAAQ,QAAQ,IAAI,CAAC;EACrB,QAAQ,SAAS,GAAG,UAAU;EAC9B,QAAQ,OAAO,KAAK,QAAQ;EAC5B,KAAK,CAAC;EACN,EAAE;AACF;EACA;EACA;EACA;EACA;EACA;AACG,MAAC,wBAAwB,GAAG,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC;EAC1D,IAAI,IAAI,GAAG,GAAG,QAAQ,CAAC;AACvB;EACA,IAAI,IAAI,OAAO,GAAG,IAAI,KAAK,SAAS,CAAC;AACrC;EACA,IAAI,IAAI,CAAC,GAAG,IAAIT,SAAO,EAAE,CAAC;AAC1B;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;EACnB,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB;EACA,IAAI,IAAI,eAAe,GAAG,SAAS,IAAI,CAAC;EACxC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;EAC9B,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EACtC,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EAChC,YAAY,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC7B,YAAY,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE;EAClE,gBAAgB,IAAI,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;EACxC,gBAAgB,GAAG,SAAS,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC;EAC/C,oBAAoB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5C,iBAAiB;EACjB,gBAAgB,eAAe,CAAC,KAAK,CAAC,CAAC;EACvC,aAAa,CAAC,CAAC;EACf,SAAS;EACT,KAAK,CAAC;EACN,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACjC,QAAQ,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,KAAK;AACL;EACA,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EAClC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACvC,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC;EAC1B,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACxB,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EACxB,YAAY,GAAG,OAAO,CAAC;EACvB,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EAChD,oBAAoB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC,oBAAoB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC,oBAAoB,IAAI,IAAI,GAAGK,iBAAe,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC;EACrH,oBAAoB,GAAG,IAAI,EAAE,CAAC,CAAC;EAC/B,wBAAwB,KAAK,EAAE,CAAC;EAChC,qBAAqB;EACrB,iBAAiB;EACjB,aAAa,KAAI;EACjB,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACjD,oBAAoB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACtE,oBAAoB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACtE,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;EACxG,wBAAwB,KAAK,EAAE,CAAC;EAChC,qBAAqB;EACrB,iBAAiB;EACjB,aAAa;EACb,YAAY,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,YAAY,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EACpE,SAAS;EACT,KAAK;AACL;EACA,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACrC,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EACzB,QAAQ,IAAI,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAClF,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAC5B,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5B,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC5B,KAAK;AACL;EACA,IAAI,OAAO,GAAG,CAAC;EACf,EAAE;AACF;EACA;EACA;EACA;EACA;EACA;AACG,MAAC,oBAAoB,GAAG,SAAS,IAAI,CAAC,GAAG,CAAC;EAC7C,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACnC;EACA,IAAI,IAAI,SAAS,GAAG,EAAE,CAAC;EACvB,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;AACnB;EACA,IAAI,IAAI,eAAe,GAAG,SAAS,IAAI,CAAC;EACxC,QAAQ,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EACxD,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;EACtC,YAAY,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EAChC,YAAY,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC7B,YAAY,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE;EAClE,gBAAgB,eAAe,CAAC,KAAK,CAAC,CAAC;EACvC,aAAa,CAAC,CAAC;EACf,SAAS;EACT,KAAK,CAAC;EACN,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACpC,QAAQ,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjC,KAAK;AACL;EACA,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EACrC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5B,QAAQ,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE;EAC9D,YAAY,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;EAC9B,YAAY,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;EACxC,YAAY,GAAG,CAAC,SAAS,EAAE,CAAC;EAC5B,YAAY,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACzD,YAAY,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC3D,YAAY,GAAG,CAAC,MAAM,EAAE,CAAC;EACzB,YAAY,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC;EACtC,YAAY,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/D,YAAY,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjE,SAAS,CAAC,CAAC;EACX,KAAK;EACL;;;;;;;;;;;;;;;;;;;;"}